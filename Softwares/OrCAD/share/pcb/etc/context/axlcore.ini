; Property of Cadence Design Systems Inc.  All Rights Reserved.
;
; $Header: /vobs/psd_backend_skill/context/axlcore/axlcore.ini /main/6 2010-05-14T16:08:08-04 fxf $
;
; Description: - user register Skill functions.
;


/* 
#ifdef DOC_C 
 NAME 
        axlCmdRegister - register a cmd with allegro
 SYNOPSIS 
        axlCmdRegister (
            t_allegroCmd
            s_callback
            ?cmdType t_cmdType
	    ?doneCmd s_doneCmd
	    ?cancelCmd s_cancelCmd
        )    
        ==> t/nil 
 FUNCTION 
  
 NEEDS    
          
 RETURNS  
        
#endif 
 */

(defun axlCmdRegister (	allegroCmd
			callback
			@key
			(cmdType nil)
			(doneCmd 'axlFinishEnterFun)
			(cancelCmd 'axlCancelEnterFun))

    (_axlCmdRegister allegroCmd callback cmdType doneCmd cancelCmd)
)

;; legacy APIs
alias _axlDBCreateSymDefSkeleton axlDBCreateSymDefSkeleton
alias _axlDBCreateComponent axlDBCreateComponent
alias _axlCNSGetDefaultMinLineWidth axlCNSGetDefaultMinLineWidth
alias _fpDrawGetXSection axlGetXSection

; Skill removed these license APIs but Cdn MsWare still want them
alias lbIsProductEnabled axlLicIsProductEnabled
alias lbCheckIn _axlLicCheckIn
alias lbCheckOut _axlLicCheckOut
alias lbDefaultVersion axlLicDefaultVersion


/*------------------------------------------------------------------------*/
/*INDENT OFF*/
/*-
#ifdef DOC_C
 NAME
	axlMathConstants - pre-defined high accuracy constants
 SYNOPSIS
	Fundamental match constants
 FUNCTION
	Provides pre-defined set of high accuracy math constants. They are:
	   axlPI  	- PI
	   axlPI_2  	- PI/2.0
	   axlPI_4  	- PI/4.0

	   axlSQRT2	- sqrt(2)
	   axlSQRT1_2	- 1/sqrt(2)

	   axlEpsilonFloat  - epsilon for floating point numbers (32 bit)
	   axlEpsilonDouble - epsilon for doubles (64 bit)

	   axlDegPerRad	- Degrees per radian
	   axlRadPerDeg	- Radians per degree

	   axlRad0, axlRad45, axlRad90, axlRad135, axlRad180,
	   axlRad225, axlRad270, axlRad315, axlRad360
			   - radians values for popular degrees values

	   Note: Skill, by default, limits the number of decimal places printed but these
		constants are still stored and used at the full precision. To see the
		full precision of the constant you can do:
		   sstatus(fullPrecision t)
		       or
		   printf("%5.18\n" axlPI)
#endif
**/
/*INDENT ON*/

axlPI 		= 3.14159265358979323846
setVarWriteProtect('axlPI)
axlPI_2 	= 1.57079632679489661923
setVarWriteProtect('axlPI_2)
axlPI_4 	= 0.78539816339744830962
setVarWriteProtect('axlPI_4)

axlSQRT2	= 1.41421356237309504880
setVarWriteProtect('axlSQRT2)
axlSQRT1_2	= 0.70710678118654752440
setVarWriteProtect('axlSQRT1_2)

axlDegPerRad	= 57.2957795130823209
setVarWriteProtect('axlDegPerRad)
axlRadPerDeg	= 0.0174532925199432958
setVarWriteProtect('axlDegPerRad)

axlEpsilonFloat	= 1.192092896E-07
setVarWriteProtect('axlEpsilonFloat)
axlEpsilonDouble	= 2.2204460492503131E-16
setVarWriteProtect('axlEpsilonDouble)

axlRad0		= 0.0
setVarWriteProtect('axlRad0)
axlRad45	= axlPI/4.0
setVarWriteProtect('axlRad45)
axlRad90	= axlPI/2.0
setVarWriteProtect('axlRad90)
axlRad135	= (3.0 * axlPI)/4.0
setVarWriteProtect('axlRad135)
axlRad180	= axlPI
setVarWriteProtect('axlRad180)
axlRad225	= (5.0 * axlPI)/4.0
setVarWriteProtect('axlRad225)
axlRad270	= (3.0 * axlPI)/2.0
setVarWriteProtect('axlRad270)
axlRad315	= (7.0 * axlPI)/4.0
setVarWriteProtect('axlRad315)
axlRad360	= axlPI * 2.0
setVarWriteProtect('axlRad360)

setVarWriteProtect('axlDegPerRad)


