include "dfa_constraints.par"

use DFA;


RuleDefine

Rule test_point_audit

via1 := isVia(hole1) AND
symbolVia(hole1) == 0 AND

select_types := concat(PIN_TYPE_SELECTOR) AND
pad_stacks := concat(PAD_STACK_TYPE_SELECTOR) AND
test_pads := concat(TEST_PAD) AND
test_vias := concat(TEST_VIA) AND
test_grid_x := concat(TEST_GRID_X) AND
test_grid_y := concat(TEST_GRID_Y) AND
min_pad_size := concat(MIN_PAD_SIZE) AND
min_spacing := concat(MIN_SPACING) AND
tp_under_component := concat(ALLOW_UNDER_COMPONENT) AND
allowed_layer := concat(LAYER) AND
allowed_unit := concat(UNITS) AND
fix_test_points := concat(FIX_TEST_POINTS) AND
test_directly_on_pin := concat(ALLOW_TEST_DIRECTLY_ON_PIN) AND
min_disp := concat(MIN_DISPLACEMENT) AND
max_disp := concat(MAX_DISPLACEMENT) AND
constr := concat(CONSTRAINTS) AND

/*  Checks related to via holes   */

findfirst(constr,
              append(done,constr) AND
              curr_ind := count(done) AND
              curr_pintype := nth(select_types,curr_ind) AND
              curr_pdstack := nth(pad_stacks,curr_ind) AND 
              if(curr_pintype == "Any Pnt",
                 TRUE,
                 matchPinType(hole1,curr_pintype)
              ) AND
              if(testPoint(via1),
                       hole_tp := testPoint(via1),
                       hole_tp:=getAutoGeneratedTP(via1)
              ) AND
              if(curr_pdstack == "Either",
                 TRUE,
                 curr_pdstack == getPadStack(hole_tp)
              ) 
            ) AND

valConstraint := nth(constr, count(done)) AND

curr_layer := nth(allowed_layer,count(done)) AND

getLayer(hole_tp) == expandLayers(curr_layer) AND

my_min_disp := nth(min_disp,count(done)) AND
if(symbolVia(hole_tp) == 1,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,via1),nth(allowed_unit,count(done))) < my_min_disp),
   valErr1 := "Displacement from "+ name(via1) +"        : "  + 
        ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,via1),nth(allowed_unit,count(done)))) + "\nAllowed Minimum Displacement    : " + ntoa(my_min_disp)+ "\n" AND
   WriteDRCMarker(hole_tp,
   "DFA / TestPoint Allowed Minimum displacement of autogenerated  testpoint" + ntoa(my_min_disp),
  convertDbToUserUnits(getHole2HoleDistance(hole_tp,via1),nth(allowed_unit,count(done)))) ,
   valErr1 := ""
  ),
 valErr1 := "") AND

my_max_disp := nth(max_disp,count(done)) AND
if(symbolVia(hole_tp) == 1,
   if(convertDbToUserUnits(getHole2HoleDistance(hole_tp,via1),nth(allowed_unit,count(done))) > my_max_disp,
   valErr2 := "Displacement from "+ name(via1) + "        : " +ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,via1),nth(allowed_unit,count(done)))) + "\nAllowed Maximum Displacement   : " + ntoa(my_max_disp) + "\n" AND
   WriteDRCMarker(hole_tp,
   "DFA / TestPoint Allowed Maximum displacement of autogenerated testpoint " + ntoa(my_max_disp),
  convertDbToUserUnits(getHole2HoleDistance(hole_tp,via1),nth(allowed_unit,count(done)))) ,
   valErr2 := ""
  ),
valErr2 := "") AND
   

my_test_grid_x := nth(test_grid_x,count(done))AND

if((my_test_grid_x /= 0),
if((remainder(toInt(convertDbToUserUnits(getXCoord(hole_tp),nth(allowed_unit,count(done)))), my_test_grid_x) /= 0) ,
   valErr3 := "X coordinate                      : " + 
             ntoa(convertDbToUserUnits(getXCoord(hole_tp),nth(allowed_unit,count(done)))) + " (not on allowed value of " 
        + ntoa(my_test_grid_x) + ")\n" AND
   WriteDRCMarker(hole_tp,
  "DFA / TestPoint Allowed test grid:x " + ntoa(my_test_grid_x),
 convertDbToUserUnits(getXCoord(hole_tp),nth(allowed_unit,count(done)))) ,
   valErr3 := ""
  ),
 valErr3 := "") AND

my_test_grid_y := nth(test_grid_y,count(done))AND

if((my_test_grid_y /= 0),
if((remainder(toInt(convertDbToUserUnits(getYCoord(hole_tp),nth(allowed_unit,count(done)))), my_test_grid_y) /= 0) ,
   valErr4 := "Y coordinate                      : " +
             ntoa(convertDbToUserUnits(getYCoord(hole_tp),nth(allowed_unit,count(done)))) +
" (not on allowed value of "
        + ntoa(my_test_grid_y) + ")\n" AND
   WriteDRCMarker(hole_tp,
  "DFA / TestPoint Allowed test grid:y " + ntoa(my_test_grid_y),
 convertDbToUserUnits(getYCoord(hole_tp),nth(allowed_unit,count(done)))) ,
   valErr4 := "" 
  ),
 valErr4 := "") AND

my_min_padsize := nth(min_pad_size,count(done)) AND

if(convertDbToUserUnits(getMinPadSize(hole_tp,curr_layer),nth(allowed_unit,count(done))) < my_min_padsize ,
   valErr5 := "Minimum Pad Size                   : " +
           ntoa(convertDbToUserUnits(getMinPadSize(hole_tp,curr_layer),nth(allowed_unit,count(done)))) 
       + "\nAllowed Minimum Pad Size           : " + ntoa(my_min_padsize) + "\n" AND
   WriteDRCMarker(hole_tp,
       "DFA / TestPoint Allowed Minimum Pad Size  " + ntoa(my_min_padsize),
 convertDbToUserUnits(getMinPadSize(hole_tp,curr_layer),nth(allowed_unit,count(done)))) ,
   valErr5 := "" 
  ) AND 

my_min_spacing := nth(min_spacing,count(done)) AND
count(vias_nearby := getViasInArea(hole_tp, 2*my_min_spacing, 2*my_min_spacing)) AND
cnt2 := count(foreach(vias_nearby,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done))) < my_min_spacing) ,
   err_a := "yes",
   err_a := "") AND
   err_a == "yes" )) AND
if(cnt2 > 0,
if(err_a ,
    valErr_via := "Testpoints have spacing less than Allowed value of " + ntoa(my_min_spacing) + "\n",
    valErr_via := ""
),
 valErr_via := "") AND

cnt1 := count(foreach(vias_nearby,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done))) < my_min_spacing) ,
   err1 := name(vias_nearby) + "           : "  
               +ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done)))) + "\n" AND
   append(valErr6a,err1) AND
   WriteDRCMarker(hole_tp,
"DFA / TestPoint Allowed Minimum spacing betwen testpoints " + ntoa(my_min_spacing),
   convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done)))) ,
   err1 := ""  AND
   append(valErr6a,err1)
  ))) AND

if(cnt1 > 0, 
   valErr6 := concat_str(valErr6a), 
   valErr6 := "" 
) AND
count(pins_nearby := getPinsInArea(hole_tp, 2*my_min_spacing, 2*my_min_spacing)) AND 
cnt3 := count(foreach(pins_nearby,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done))) < my_min_spacing) ,
   err_b := "yes",
   err_b := "") AND
   err_b == "yes")) AND
if(cnt3 >0,
if(err_b ,
    valErr_pin := "Testpoints have spacing less than Allowed value of " + ntoa(my_min_spacing) + "\n",
    valErr_pin := ""
),
valErr_pin := "") AND

count(
   foreach(pins_nearby,
      if(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done))) < my_min_spacing ,
         val_tmp := name(pins_nearby) + "           :  " +
                    ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done)))) + "\n" AND
         WriteDRCMarker(hole_tp,
        "DFA / TestPoint Allowed Minimum spacing betwen testpoints =" +ntoa(my_min_spacing),
           convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done)))) AND
         append(err2, val_tmp),
         val_tmp := "" AND
         append(err2, val_tmp)
      )  
  )
) AND
if(err2,
   valErr7 := concat_str(err2),
   valErr7 := ""
) AND

  design2 := getDesign(hole_tp) AND
  component1 := component(design2) AND
my_tp_under_component := nth(tp_under_component,count(done)) AND
if((my_tp_under_component=="No"),
  cnt := count(foreach(component1,
           hole_un := TPViaUnderComp(component1,hole_tp) AND
        valErr8a := "TestPoint " + name(hole_tp) + " found  \nunder component " + format(name(component1), 10) + "\n" AND
//        append(valErr8a ,err_undr) AND
        WriteDRCMarker(component1, "DFA / TestPoint found under component", "")
  )),
   append(valErr8a , "") AND
   cnt := 0
) AND

if(cnt > 0,  
   valErr8 := concat_str(valErr8a),  
   valErr8 := ""  
) AND   

if((symbolVia(hole_tp) == 1),
if((count(getLayer(hole_tp)) == 1),
    if(isNull(getHolePadStackName(hole_tp) == nth(test_pads,count(done))),
       WriteDRCMarker(hole_tp,"DFA / TestPoint Wrong Padstack Name ",getHolePadStackName(hole_tp)) AND
       valErr9 := "Pad stack                         : " +
                  getHolePadStackName(hole_tp) + " (allowed pad stack is "
                 + nth(test_pads,count(done)) + ")\n",
       valErr9 := ""
    ),
    if(isNull(getHolePadStackName(hole_tp) == nth(test_vias,count(done))),
       WriteDRCMarker(hole_tp,"DFA / TestPoint Wrong Padstack Name ",getHolePadStackName(hole_tp)) AND
       valErr9 := "Pad stack                         : " +
                  getHolePadStackName(hole_tp) + " (allowed pad stack is "
                 + nth(test_pads,count(done)) + ")\n",
       valErr9 := "" 
    )
),
valErr9 := "") AND

my_fix_tp :=  nth(fix_test_points,count(done))AND
if(((my_fix_tp == "Yes") AND isNull(findFixedTP(hole_tp))),
        valErr10 := "Test Point " + name(hole_tp) + " not Fixed\n"  AND
        WriteDRCMarker(hole_tp, "DFA / TestPoint not Fixed",""),
        valErr10 := "" 
) AND

my_test_directly_pin :=  nth(test_directly_on_pin,count(done)) AND
if(((my_test_directly_pin == "Yes") AND (symbolVia(hole_tp) == 1)),
        valErr11 := "Testpoint " + name(hole_tp) + " not directly on pin\n" AND
        WriteDRCMarker(hole_tp,"DFA / TestPoint not directly on pin.",""),
        valErr11 := "" 
)  AND   


if(testPointTented(hole_tp),
   valErr12 := "Test point " + name(hole_tp) + " covered by Solder Mask\n" AND
   WriteDRCMarker(hole_tp, "DFA / Test point covered by Solder Mask", ""),
  valErr12 := ""
) AND 

valErr :=  valErr1 + valErr2 + valErr3 +  valErr4 
          + valErr5 + valErr_via + valErr6 + valErr_pin ++ valErr7 + valErr8
           +  valErr9 +  valErr10 + valErr11 + valErr12  AND

valErr /= ""

Message(ERROR, hole_tp,
        "test point violations",
        "\nTestpoint                          : ?hole_tp",
        "Constraint Name                    : ?valConstraint",
        "?valErr"
);


pin1 := isPin(hole1) AND
symbolVia(hole1) == 0 AND

select_types := concat(PIN_TYPE_SELECTOR) AND
pad_stacks := concat(PAD_STACK_TYPE_SELECTOR) AND
test_pads := concat(TEST_PAD) AND
test_vias := concat(TEST_VIA) AND
test_grid_x := concat(TEST_GRID_X) AND
test_grid_y := concat(TEST_GRID_Y) AND
min_pad_size := concat(MIN_PAD_SIZE) AND
min_spacing := concat(MIN_SPACING) AND
tp_under_component := concat(ALLOW_UNDER_COMPONENT) AND
allowed_layer := concat(LAYER) AND
allowed_unit := concat(UNITS) AND
fix_test_points := concat(FIX_TEST_POINTS) AND
test_directly_on_pin := concat(ALLOW_TEST_DIRECTLY_ON_PIN) AND
min_disp := concat(MIN_DISPLACEMENT) AND
max_disp := concat(MAX_DISPLACEMENT) AND
constr := concat(CONSTRAINTS) AND
 
findfirst(constr,
              append(done,constr) AND
              curr_ind := count(done) AND
              curr_pintype := nth(select_types,curr_ind) AND
              curr_pdstack := nth(pad_stacks,curr_ind) AND
              if(curr_pintype == "Any Pnt",
                 TRUE,
                 matchPinType(hole1,curr_pintype)
              ) AND
              if(testPoint(pin1),
                       hole_tp := testPoint(pin1),
                       hole_tp:=getAutoGeneratedTP(pin1)
              )  AND
              if(curr_pdstack == "Either",
                 TRUE,
                 curr_pdstack == getPadStack(hole_tp)
              )
            ) AND
 
valConstraint := nth(constr, count(done)) AND
 
curr_layer := nth(allowed_layer,count(done)) AND
 
getLayer(hole_tp) == expandLayers(curr_layer) AND
 
my_min_disp := nth(min_disp,count(done)) AND
if(symbolVia(hole_tp) == 1,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,pin1),nth(allowed_unit,count(done))) < my_min_disp),
   valErr1 := "Displacement from "+ name(pin1) +"            : "  +
        ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pin1),nth(allowed_unit,count(done)))) + "\nAllowed Minimum Displacement       : " + ntoa(my_min_disp)+ "\n" AND
   WriteDRCMarker(hole_tp,
"DFA / TestPoint Allowed Minimum displacement of autogenerated  testpoint " + ntoa(my_min_disp),
       convertDbToUserUnits(getHole2HoleDistance(hole_tp,pin1),nth(allowed_unit,count(done)))) ,
   valErr1 := ""
  ),
 valErr1 := "") AND

my_max_disp := nth(max_disp,count(done)) AND
if(symbolVia(hole_tp) == 1,
   if(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pin1),nth(allowed_unit,count(done))) > my_max_disp,
   valErr2 := "Displacement from "+ name(pin1) + "            : " +
          ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pin1),
            nth(allowed_unit,count(done)))) + "\nAllowed Maximum Displacement       : " + 
           ntoa(my_max_disp) + "\n" AND
   WriteDRCMarker(hole_tp,
"DFA / TestPoint Allowed Maximum displacement of autogenerated testpoint " + ntoa(my_max_disp),
     convertDbToUserUnits(getHole2HoleDistance(hole_tp,pin1),nth(allowed_unit,count(done)))) ,
   valErr2 := ""
  ),
valErr2 := "") AND
  
 
my_test_grid_x := nth(test_grid_x,count(done))AND
 
if((my_test_grid_x /= 0),
if((remainder(toInt(convertDbToUserUnits(getXCoord(hole_tp),nth(allowed_unit,count(done)))), my_test_grid_x) /= 0) ,
   valErr3 := "X coordinate                       : " + ntoa(convertDbToUserUnits(getXCoord(hole_tp),nth(allowed_unit,count(done)))) + "  (not on allowed value of "
         + ntoa(my_test_grid_x) + ")\n" AND
   WriteDRCMarker(hole_tp,
"DFA / TestPoint allowed test grid:x =" + ntoa(my_test_grid_x),
     convertDbToUserUnits(getXCoord(hole_tp),nth(allowed_unit,count(done)))) ,
   valErr3 := ""
  ),
 valErr3 := "") AND

my_test_grid_y := nth(test_grid_y,count(done))AND
 
if((my_test_grid_y /= 0),
if((remainder(toInt(convertDbToUserUnits(getYCoord(hole_tp),nth(allowed_unit,count(done)))),
my_test_grid_y) /= 0) ,                           
   valErr4 := "Y coordinate                       : " +
             ntoa(convertDbToUserUnits(getYCoord(hole_tp),nth(allowed_unit,count(done)))) +
" (not on allowed value of "
        + ntoa(my_test_grid_y) + ")\n" AND
   WriteDRCMarker(hole_tp,  
  "DFA / TestPoint Allowed test grid:y " + ntoa(my_test_grid_y), 
 convertDbToUserUnits(getYCoord(hole_tp),nth(allowed_unit,count(done)))) ,
   valErr4 := ""
  ),   
 valErr4 := "") AND

   
 my_min_padsize := nth(min_pad_size,count(done)) AND
if(convertDbToUserUnits(getMinPadSize(hole_tp,curr_layer),nth(allowed_unit,count(done))) < my_min_padsize ,
   valErr5 := "Minimum Pad Size                   : " +
           ntoa(convertDbToUserUnits(getMinPadSize(hole_tp,curr_layer),nth(allowed_unit,count(done))))
       + "\nAllowed Minimum Pad Size           : " + ntoa(my_min_padsize) + "\n" AND
   WriteDRCMarker(hole_tp,
"DFA / TestPoint Allowed Minimum Pad Size " + ntoa(my_min_padsize),
      convertDbToUserUnits(getMinPadSize(hole_tp,curr_layer),nth(allowed_unit,count(done)))) ,
   valErr5 := ""
  ) AND
 
my_min_spacing := nth(min_spacing,count(done)) AND
count(vias_nearby := getViasInArea(hole_tp, 2*my_min_spacing, 2*my_min_spacing)) AND
cnt2 := count(foreach(vias_nearby, 
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done))) < my_min_spacing) , 
   err_a := "yes",
   err_a := "" ) AND
   err_a == "yes")) AND  
if(cnt2 > 0,
if(err_a , 
    valErr_via := "Testpoints have spacing less than Allowed value of " + ntoa(my_min_spacing) + " from vias\n", 
//    valErr_via := "Testpoints have spacing less than Allowed value of " + ntoa(cnt2) + " from vias\n", 
    valErr_via := "" 
),
valErr_via := "") AND 

cnt1 := count(foreach(vias_nearby,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done))) < my_min_spacing) ,
   err1 := name(vias_nearby) + "            : "
               +ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done)))) + "\n" AND
   append(valErr6a,err1) AND
   WriteDRCMarker(hole_tp,
"DFA / TestPoint Allowed Minimum spacing betwen testpoints " + ntoa(my_min_spacing),
      convertDbToUserUnits(getHole2HoleDistance(hole_tp,vias_nearby),nth(allowed_unit,count(done)))) ,
   err1 := ""  AND
   append(valErr6a,err1)
  ))) AND

if(cnt1 > 0,
   valErr6 := concat_str(valErr6a),
   valErr6 := ""
) AND
count(pins_nearby := getPinsInArea(hole_tp, 2*my_min_spacing, 2*my_min_spacing)) AND
cnt3 := count(foreach(pins_nearby,
   if((convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done))) < my_min_spacing) ,
   err_b := "yes",
   err_b := "") AND
   err_b == "yes")) AND 
if(cnt3 >0,
if(err_b ,
    valErr_pin := "Testpoints have spacing less than Allowed value of " + ntoa(my_min_spacing) + " from pins\n",
    valErr_pin := ""
),
valErr_pin := "") AND

count(
   foreach(pins_nearby,
      if(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done))) < my_min_spacing ,
         val_tmp := name(pins_nearby) + "            :  " +
                    ntoa(convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done)))) + "\n" AND
         WriteDRCMarker(hole_tp,
          "DFA / TestPoint Allowed Minimum spacing betwen testpoints" +ntoa(my_min_spacing) ,
         convertDbToUserUnits(getHole2HoleDistance(hole_tp,pins_nearby),nth(allowed_unit,count(done)))) AND
         append(err2, val_tmp),
         val_tmp := "" AND
         append(err2, val_tmp)
      ) 
  )
) AND
if(err2,
   valErr7 := concat_str(err2),
   valErr7 := ""
) AND

  design2 := getDesign(hole_tp) AND
  component1 := component(design2) AND
my_tp_under_component := nth(tp_under_component,count(done)) AND
if((my_tp_under_component=="No"),
  cnt := count(foreach(component1,
           hole_un := TPViaUnderComp(component1,hole_tp) AND
        valErr8a := "TestPoint " + name(hole_tp) + " found  \nunder component " + format(name(component1), 10) + "\n" AND
//        append(valErr8a ,err_undr) AND
        WriteDRCMarker(component1, "DFA / TestPoint found under component", "")
  )),
   append(valErr8a , "") AND
   cnt := 0
) AND

if(cnt > 0, 
   valErr8 := concat_str(valErr8a),
   valErr8 := "" 
) AND  

if((symbolVia(hole_tp) == 1),
if((count(getLayer(hole_tp)) == 1),
    if(isNull(getHolePadStackName(hole_tp) == nth(test_pads,count(done))),
       WriteDRCMarker(hole_tp,"DFA / TestPoint Wrong Padstack Name ",getHolePadStackName(hole_tp)) AND
       valErr9 := "Pad stack                          : " +
                     getHolePadStackName(hole_tp) + " (allowed pad stack " + 
     nth(test_pads,count(done)) + ")\n" ,
       valErr9 := ""
    ),
    if(isNull(getHolePadStackName(hole_tp) == nth(test_vias,count(done))),
       WriteDRCMarker(hole_tp,"DFA / TestPoint Wrong Padstack Name ",getHolePadStackName(hole_tp)) AND
       valErr9 := "Pad stack                          : " +
                     getHolePadStackName(hole_tp) + " (allowed pad stack " +
     nth(test_pads,count(done)) + ")\n" ,
       valErr9 := ""
    )
),
valErr9 := "") AND
 
my_fix_tp :=  nth(fix_test_points,count(done))AND
if(((my_fix_tp == "Yes") AND isNull(findFixedTP(hole_tp))),
        valErr10 := "Test Point " + name(hole_tp) + " is not Fixed\n" AND
        WriteDRCMarker(hole_tp,"DFA / TestPoint not Fixed.",""),
        valErr10 := ""
) AND
 
my_test_directly_pin :=  nth(test_directly_on_pin,count(done)) AND
if(((my_test_directly_pin == "Yes") AND (symbolVia(hole_tp) == 1)),
        valErr11 := "Testpoint " + name(hole_tp) + " not directly on pin\n" AND
        WriteDRCMarker(hole_tp,"DFA / TestPoint not directly on pin.",""),
        valErr11 := ""
)  AND   

if((count(hole_tent := testPointTented(hole_tp)) > 0),
   valErr12 := "Test point " + name(hole_tp) + " covered by Solder Mask\n" AND  
   WriteDRCMarker(hole_tp, "DFA / Test point covered by Solder Mask", ""),
  valErr12 := "" 
) AND    

valErr :=  valErr1 + valErr2 + valErr3 +  valErr4
          + valErr5 + valErr_via + valErr6 + valErr_pin + valErr7 + valErr8
           + valErr9 +  valErr10 + valErr11 + valErr12 AND 
 
valErr /= ""
 
Message(ERROR, hole_tp,
        "test point violations",
        "\nTestpoint                          : ?hole_tp",
        "Constraint Name                    : ?valConstraint",
        "?valErr"
);

EndRule 

EndRuleDefine
